Step-by-Step Algorithm
Initialize a variable to store the maximum value:

Create a variable, max, and initialize it with the first element of the array.
Iterate through the array:

Use a loop to traverse each element in the array.
For each element, compare it with the current max value.
If the current element is greater than max, update max with the current element's value.
Return or print the maximum value:

After completing the loop, max will hold the highest value in the array.
#include <stdio.h>

// Function to find the highest value in an array
int findMax(int arr[], int n) {
    // Initialize max with the first element of the array
    int max = arr[0];

    // Iterate through the array starting from the second element
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i]; // Update max if the current element is greater
        }
    }

    return max; // Return the maximum value found
}

int main() {
    int arr[] = {1, 3, 7, 0, 5, 9, 2}; // Example array
    int n = sizeof(arr) / sizeof(arr[0]); // Calculate the size of the array

    int max = findMax(arr, n); // Find the maximum value in the array

    printf("The highest value in the array is: %d\n", max); // Print the maximum value

    return 0;
}
Explanation
Initialization:

int max = arr[0]; initializes the max variable with the first element of the array.
Iteration:

The for loop starts from the second element (index 1) and goes to the last element.
if (arr[i] > max) { max = arr[i]; } checks if the current element is greater than the current max value and updates max if true.
Return the Maximum Value:

After the loop completes, max contains the highest value in the array.
Print the Result:

printf("The highest value in the array is: %d\n", max); prints the highest value found.
This program efficiently finds the highest value in an array with a single pass through the array (linear time complexity) and uses a constant amount of extra space (space complexity of o(n))






