Step-by-Step Algorithm
Define the Recursive Function:

Create a function towerOfHanoi(n, from_rod, to_rod, aux_rod) where n is the number of disks, from_rod is the source peg, to_rod is the destination peg, and aux_rod is the auxiliary peg.
Base Case:

If n == 1, move the disk from from_rod to to_rod and return.
Recursive Case:

Move n-1 disks from from_rod to aux_rod using to_rod as auxiliary.
Move the nth disk from from_rod to to_rod.
Move the n-1 disks from aux_rod to to_rod using from_rod as auxiliary.

#include <stdio.h>

// Function to move n disks from from_rod to to_rod using aux_rod
void towerOfHanoi(int n, char from_rod, char to_rod, char aux_rod) {
    if (n == 1) {
        printf("Move disk 1 from rod %c to rod %c\n", from_rod, to_rod);
        return;
    }
    towerOfHanoi(n - 1, from_rod, aux_rod, to_rod);
    printf("Move disk %d from rod %c to rod %c\n", n, from_rod, to_rod);
    towerOfHanoi(n - 1, aux_rod, to_rod, from_rod);
}

int main() {
    int n; // Number of disks

    // Prompt the user for the number of disks
    printf("Enter the number of disks: ");
    scanf("%d", &n);

    // Solve the Tower of Hanoi problem
    towerOfHanoi(n, 'A', 'C', 'B'); // A, B and C are names of rods

    return 0;
}
Explanation
Recursive Function:

void towerOfHanoi(int n, char from_rod, char to_rod, char aux_rod):
If n == 1, it prints the move from from_rod to to_rod.
Otherwise, it recursively moves n-1 disks from from_rod to aux_rod using to_rod as auxiliary, moves the nth disk from from_rod to to_rod, and then moves n-1 disks from aux_rod to to_rod using from_rod as auxiliary.
Main Function:

Prompts the user for the number of disks.
Calls the towerOfHanoi function with the given number of disks and peg names 'A', 'C', and 'B'.
This recursive solution is efficient for the Tower of Hanoi problem with a time complexity of o(n2)
